@page "/AddEditCliente/{*ParameterID}"
@rendermode InteractiveWebAssemblyNoPreRender


@inject HttpClient Http
@inject NavigationManager navManager
@inject Microsoft.JSInterop.IJSRuntime JS

<PageTitle>Anagrafica Cliente</PageTitle>

@if (fAddRecord)
{
    <div class="row">
        <div class="col-2">
            <SfButton title="Back" IconCss="fa fa-arrow-left" CssClass="e-small e-round mb-2" IsPrimary="true"
                @onclick="onBackPageClick"></SfButton>
        </div>
        <div class="col-10 d-flex justify-content-center ">
            <h2> Aggiungi nuovo Cliente</h2>
        </div>
    </div>

}
else
{
    <div class="row">
        <div class="col-2">
            <SfButton title="Back" IconCss="fa fa-arrow-left" CssClass="e-small e-round mb-2" IsPrimary="true"
                @onclick="onBackPageClick"></SfButton>
        </div>
        <div class="col-10 d-flex justify-content-center ">
            <h2> Modifica dati Cliente @SelectedRK.RagioneSociale</h2>
        </div>
    </div>

}

<div class="row">
    <div class="col-md-12">
        <SfTab>
            <TabAnimationSettings>
                <TabAnimationPrevious Effect=AnimationEffect.None></TabAnimationPrevious>
                <TabAnimationNext Effect=AnimationEffect.None></TabAnimationNext>
            </TabAnimationSettings>
            <TabItems>
                <TabItem>
                    <ChildContent>
                        <TabHeader Text="Dati Anagrafici"></TabHeader>
                    </ChildContent>
                    <ContentTemplate>

                        <SfDataForm  Model="@SelectedRK" ColumnCount=12 ColumnSpacing="10px" OnValidSubmit="onValidSubmit"
                            ButtonsAlignment="FormButtonsAlignment.Right">
                            <FormValidator>
                                <Blazored.FluentValidation.FluentValidationValidator Validator="@fluentValidator"></Blazored.FluentValidation.FluentValidationValidator>
                            </FormValidator>
                            <FormItems>
                                <FormItem Field="@nameof(SelectedRK.RagioneSociale)" LabelText="Ragione Sociale:" ColumnSpan="12"/>
                                <FormItem Field="@nameof(SelectedRK.Indirizzo)" LabelText="Indirizzo:" ColumnSpan="12" />

                                <FormItem Field="@nameof(SelectedRK.CAP)" LabelText="CAP:" ColumnSpan="3" />
                                <FormItem Field="@nameof(Cliente.Localita)" LabelText="Località:"  ColumnSpan="6"/>
                                <FormItem Field="@nameof(Cliente.Provincia)" LabelText="Prov.:" ColumnSpan="3" />

                                <FormItem Field="@nameof(Cliente.PartitaIVA)" LabelText="Partita IVA:" ColumnSpan="6" />
                                <FormItem Field="@nameof(Cliente.CodiceFiscale)" LabelText="Codice Fiscale:" ColumnSpan="6" />

                                <FormItem Field="@nameof(Cliente.Telefono)" LabelText="Telefono:" ColumnSpan="6" />
                                <FormItem Field="@nameof(Cliente.EMail)" LabelText="E-Mail:" ColumnSpan="6" />

                                <FormItem Field="@nameof(Cliente.IDZona)" ColumnSpan="12">
                                    <Template>
                                        <label class="e-form-label">Zona:</label>
                                        <SfDropDownList TValue="string" TItem="Zona" Placeholder="Seleziona Zona" DataSource="ArrayZone" @bind-Value="SelectedRK.IDZona">
                                            <DropDownListFieldSettings Value="IDZona" Text="Descrizione"></DropDownListFieldSettings>
                                        </SfDropDownList>
                                    </Template>
                                </FormItem>

                            </FormItems>
                            <FormButtons>
                                <SfButton>Registra</SfButton>
                            </FormButtons>
                        </SfDataForm>
                    </ContentTemplate>
                </TabItem>
            </TabItems>
        </SfTab>
    </div>
</div>

<SfDialog Width="30%" Height="20%" IsModal="true" @bind-Visible="ErrorDialogVisibility">
    <DialogTemplates>
        <Header> Attenzione </Header>
        <Content>
            <div>@strMsgError</div>
        </Content>
    </DialogTemplates>
    <DialogButtons>
        <DialogButton Content="OK" IsPrimary="true" OnClick="@ErrorDlgOKButtonClick" />
    </DialogButtons>
    <DialogAnimationSettings Effect="@DialogEffect.None"></DialogAnimationSettings>
</SfDialog>


@code {
    [Parameter]
    public string ParameterID { get; set; } = string.Empty;
    FluentValidator? fluentValidator { get; set; }

    public bool ErrorDialogVisibility = false;
    string strMsgError = ""; //Messaggio di errore da presentare all'utente

    static InteractiveWebAssemblyRenderMode InteractiveWebAssemblyNoPreRender = new(false);

    public Cliente SelectedRK { get; set; } = new();
    public List<Zona> ArrayZone { get; set; }

    public bool fAddRecord = true;
    public int ActiveTab = 0;

    protected override async Task OnInitializedAsync()
    {
        string[] array_param = ParameterID.Split("|");
        if (array_param[0] != "NEW")
        {
            //Edit

            //Strip eventuali apici
            array_param[1] = array_param[1].Replace("'", "");

            SelectedRK = await Http.GetFromJsonAsync<Cliente>("api/Clienti/" + array_param[1]) ?? new Cliente();

            ArrayZone = await Http.GetFromJsonAsync<List<Zona>>("api/Zone") ?? new List<Zona>();
            fAddRecord = false;
        }
        else
        {
            //Add
            SelectedRK = new Cliente();

            fAddRecord = true;
        }

        await InvokeAsync(StateHasChanged);
    }


    private void onBackPageClick(MouseEventArgs args) {
        //Redirect to Previous Page
        navManager.NavigateTo("Clienti");
    }

    private async void onValidSubmit()
    {
        //Add or Update Record
        string strMsgError = "";

        if (fAddRecord) {
            //Add RK 
            try
            {
                HttpResponseMessage response = await Http.PostAsJsonAsync<Cliente>("api/Clienti", SelectedRK);
                if (!response.IsSuccessStatusCode) {
                    strMsgError = "Errore immissione Cliente: " + SelectedRK.RagioneSociale;
                }
            }
            catch (Exception ex)
            {

                strMsgError = "Errore immissione Cliente: " + SelectedRK.RagioneSociale;

            }
        }
        else {
            //Update
            try
            {
                HttpResponseMessage response = await Http.PutAsJsonAsync<Cliente>("api/Clienti/" + SelectedRK.IDCliente, SelectedRK);
                if (!response.IsSuccessStatusCode) {
                    strMsgError = "Errore aggiornamento Cliente: " + SelectedRK.RagioneSociale;
                }         
            }
            catch (Exception ex) {
                strMsgError = "Errore aggiornamento Cliente: " + SelectedRK.RagioneSociale;
            }
        }

        if (strMsgError != "")
        {
            //Errori in insert/update ... 
            ErrorDialogVisibility = true;
        }
        else
        {
            //Return to list
            navManager.NavigateTo("Clienti");
        }

    }

    private  void ErrorDlgOKButtonClick() {
        ErrorDialogVisibility = false;
    }

public class FluentValidator : AbstractValidator<Cliente>
    {
        public FluentValidator()
        {
            RuleFor(Cliente => Cliente.RagioneSociale).NotEmpty().WithMessage("La ragione sociale non deve essere vuota").MaximumLength(50).WithMessage("La ragione sociale non deve eccedere i 50 caratteri");
            RuleFor(Cliente => Cliente.Indirizzo).MaximumLength(50).WithMessage("L'Indirizzo non deve eccedere i 50 caratteri");
            RuleFor(Cliente => Cliente.CAP).MaximumLength(6).WithMessage("Il CAP non deve eccedere i 6 caratteri");
            RuleFor(Cliente => Cliente.Localita).MaximumLength(50).WithMessage("La localita' non deve eccedere i 50 caratteri");
            RuleFor(Cliente => Cliente.Provincia).MaximumLength(4).WithMessage("La provinca non deve eccedere i 4 caratteri");
            RuleFor(Cliente => Cliente.PartitaIVA).MaximumLength(11).WithMessage("La partita IVA non deve eccedere gli 11 caratteri");
            RuleFor(Cliente => Cliente.CodiceFiscale).MaximumLength(16).WithMessage("Il codice fiscale non deve eccedere i 16 caratteri");
            RuleFor(Cliente => Cliente.Telefono).MaximumLength(30).WithMessage("Il telefono non deve eccedere i 30 caratteri");
            RuleFor(Cliente => Cliente.EMail).MaximumLength(50).WithMessage("La E-Mail non deve eccedere i 50 caratteri");
            RuleFor(Cliente => Cliente.IDZona).NotEmpty().WithMessage("Deve essere selezionata una Zona");
        }
    }

}
