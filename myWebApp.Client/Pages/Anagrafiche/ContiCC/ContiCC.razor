@page "/ContiCC"
@rendermode InteractiveWebAssemblyNoPreRender

@inject HttpClient Http
@inject NavigationManager navManager
@inject IJSRuntime JS

@inject AuthenticationStateProvider authenticationStateProvider
@using myWebApp.Client.Authentication

<PageTitle>Lista Conti C/C</PageTitle>

@if (Array_ContiCC is null)
{
    <div class="row">

    <div class="col-sm">
        <div class="spin-row">
            <SfSpinner Size="40" Label="Lettura dati in corso... Attendere" Type="SpinnerType.Bootstrap5"
                Visible="true"></SfSpinner>
        </div>
    </div>

</div>
}
else
{
    <div class="container-fluid">

    <div class="row">

        <div class="col-2">
            <SfButton title="Home" IconCss="fa fa-arrow-left" CssClass="e-small e-round mb-2" IsPrimary="true"
                @onclick="onReservedClick"></SfButton>
        </div>
        <div class="col-10 d-flex justify-content-center ">
            <h1> Lista Conti C/C (@DataBaseId)</h1>
        </div>
    </div>



    <div class="row">
        <div class="col-xs-2 col-sm-2 col-lg-2 col-md-2">
            <SfButton title="Aggiungi" IconCss="fa fa-add" CssClass="e-small e-round mb-2" IsPrimary="true"
                @onclick="onAddClick"></SfButton>
        </div>

        <div class="col-xs-2 col-sm-2 col-lg-2 col-md-2">
            <SfButton title="Modifica" IconCss="fa fa-edit" CssClass="e-small e-round mb-2" IsPrimary="true"
                @onclick="onEditClick"></SfButton>
        </div>

        <div class="col-xs-2 col-sm-2 col-lg-2 col-md-2">
            <SfButton title="Rimuovi" IconCss="fa fa-trash" CssClass="e-small e-round mb-2" IsPrimary="true"
                @onclick="onRemoveClick"></SfButton>
        </div>

        <div class="col-xs-6 col-sm-6 col-lg-6 col-md-6 text-end">

        </div>
    </div>

    <SfGrid @ref="Grid" DataSource="@Array_ContiCC" AllowSorting="true" AllowFiltering="true" AllowPaging="true">
        <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Menu"></GridFilterSettings>
        <GridPageSettings PageSize="15" PageSizes="true"></GridPageSettings>
        <GridSelectionSettings CheckboxOnly="true" PersistSelection="true"
            Type="Syncfusion.Blazor.Grids.SelectionType.Multiple">
        </GridSelectionSettings>
        <GridEvents OnRecordDoubleClick="RecordDoubleClickHandler" TValue="ContoCC"></GridEvents>
        <GridColumns>
            <GridColumn Type="ColumnType.CheckBox" AllowFiltering="false" AllowSorting="false" Width="50">
            </GridColumn>
            <GridColumn Field=@nameof(ContoCC.IDContoCC) HeaderText="Codice" TextAlign="TextAlign.Left" Width="20%">
            </GridColumn>
            <GridColumn Field=@nameof(ContoCC.Descrizione) HeaderText="Descrizione" Width="30%"></GridColumn>
            <GridColumn Field=@nameof(ContoCC.IBAN) HeaderText="IBAN" TextAlign="TextAlign.Left" Width="30%">
            </GridColumn>
            <GridColumn Field=@nameof(ContoCC.Default) HeaderText="Default'" TextAlign="TextAlign.Center" Width="10%">
            </GridColumn>
            <GridColumn Field=@nameof(ContoCC.Chiuso) HeaderText="Chiuso" TextAlign="TextAlign.Center" Width="10%">
            </GridColumn>

        </GridColumns>

    </SfGrid>

</div>


}

<SfDialog Width="30%" Height="20%" IsModal="true" @bind-Visible="RemoveDialogVisibility">
    <DialogTemplates>
        <Header> Attenzione </Header>
        <Content>
            <p>Confermi la rimozione dei Conti C/C selezionati?</p>
        </Content>
    </DialogTemplates>
    <DialogButtons>
        <DialogButton Content="No" IsPrimary="true" OnClick="@RemoveDlgNoButtonClick" />
        <DialogButton Content="Si" IsPrimary="false" OnClick="@RemoveDlgSiButtonClick" />

    </DialogButtons>
    <DialogAnimationSettings Effect="@DialogEffect.None"></DialogAnimationSettings>
</SfDialog>

<SfDialog Width="30%" Height="20%" IsModal="true" @bind-Visible="ErrorDialogVisibility">
    <DialogTemplates>
        <Header> Attenzione </Header>
        <Content>
            <div>@strMsgError</div>
        </Content>
    </DialogTemplates>
    <DialogButtons>
        <DialogButton Content="OK" IsPrimary="true" OnClick="@ErrorDlgOKButtonClick" />
    </DialogButtons>
    <DialogAnimationSettings Effect="@DialogEffect.None"></DialogAnimationSettings>
</SfDialog>

@code {

    SfGrid<ContoCC>? Grid;
    public List<ContoCC>? SelectedRows { get; set; }
    public bool RemoveDialogVisibility = false;
    public bool ErrorDialogVisibility = false;
    public bool PrintWaitVisible = false;
    static InteractiveWebAssemblyRenderMode InteractiveWebAssemblyNoPreRender = new(false);

    public string DataBaseId { get; set; } = string.Empty;

    public List<ContoCC>? Array_ContiCC { get; set; }

    string strMsgError = ""; //Messaggio di errore da presentare all'utente


    protected override async Task OnInitializedAsync()
    {



        bool IsTokenOk = await SetHttpTokenAndDb();
        if (!IsTokenOk)
        {
            return;
        }

        try
        {
            Array_ContiCC = await Http.GetFromJsonAsync<List<ContoCC>>("api/ContiCC") ?? new List<ContoCC>();
        }
        catch (Exception ex)
        {
            //Eccezione in lettura ... ad esempio per Ruolo utente non abilitato alla lettura 403 Forbidden
            Array_ContiCC = new List<ContoCC>();
        }

        await InvokeAsync(StateHasChanged);


    }

    async Task<bool> SetHttpTokenAndDb()
    {
        var customAuthStateProvider = (CustomAuthenticationStateProvider)authenticationStateProvider;
        var token = await customAuthStateProvider.GetToken();
        DataBaseId = await customAuthStateProvider.GetDataBaseId();
        if (!string.IsNullOrWhiteSpace(token))
        {

            Http.DefaultRequestHeaders.Clear();

            Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("bearer", token);
            Http.DefaultRequestHeaders.Add("dbName", DataBaseId);

        }
        else
        {
            navManager.NavigateTo("/login/ContiCC");
            return false;
        }

        return true;

    }


    private void onReservedClick(MouseEventArgs args)
    {
        //Redirect to Reserved
        navManager.NavigateTo("Reserved");
    }

    private void onAddClick(MouseEventArgs args)
    {
        //Redirect
        navManager.NavigateTo("AddEditContoCC/NEW|XXX");

    }


    private async void onEditClick(MouseEventArgs args)
    {
        SelectedRows = await Grid.GetSelectedRecordsAsync();

        if (SelectedRows.Count > 0)
        {
            //Edit to First Selected Item
            ContoCC RkSelected = SelectedRows[0];
            navManager.NavigateTo("AddEditContoCC/EDIT|" + RkSelected.IDContoCC);
        }
    }


    public void RecordDoubleClickHandler(RecordDoubleClickEventArgs<ContoCC> args)
    {
        navManager.NavigateTo("AddEditContoCC/EDIT|" + args.RowData.IDContoCC);
    }

    private async void onRemoveClick(MouseEventArgs args)
    {

        SelectedRows = await Grid.GetSelectedRecordsAsync();
        if (SelectedRows.Count > 0)
        {
            //Start confirm Delete Dialog
            RemoveDialogVisibility = true;
        }
    }



    private async void RemoveDlgNoButtonClick()
    {

        //hide Dialog after remove selection
        await Grid.ClearSelectionAsync();
        RemoveDialogVisibility = false;
    }


    private async void ErrorDlgOKButtonClick()
    {

        //hide Error Dialog
        ErrorDialogVisibility = false;
    }


    private async void RemoveDlgSiButtonClick(MouseEventArgs args)
    {

        RemoveDialogVisibility = false;

        strMsgError = "";

        if (SelectedRows is not null && SelectedRows.Count > 0)
        {
            foreach (ContoCC rk in SelectedRows)
            {

                try
                {

                    ContoCC deleted = await Http.DeleteFromJsonAsync<ContoCC>("api/ContiCC/" + rk.IDContoCC);
                    if (deleted.IDContoCC != rk.IDContoCC) {
                        //Error in Delete RK
                        strMsgError += "Errore rimozione Conto C/C: " + rk.Descrizione;
                    }
                }
                catch (Exception ex)
                {
                    if (strMsgError == "")
                    {
                        strMsgError += "Errore rimozione Conto C/C: " + rk.Descrizione;
                    }
                    else
                    {
                        strMsgError += " - " + rk.Descrizione;
                    }

                }
            }

            if (strMsgError != "")
            {
                //Errori in rimozione ContiCC... tipicamemnte violazione di foreign key
                ErrorDialogVisibility = true;
            }
            else {
                //Refresh grid
                Array_ContiCC = await Http.GetFromJsonAsync<List<ContoCC>>("api/ContiCC") ?? new List<ContoCC>();
            }
        }

        StateHasChanged();


    }





}
